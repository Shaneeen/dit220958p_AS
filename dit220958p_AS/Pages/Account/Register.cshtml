@page
@model dit220958p_AS.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h2>Register</h2>

<form method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <!-- First Name -->
    <div>
        <label>First Name:</label>
        <input asp-for="Input.FirstName" class="form-control" required />
        <span asp-validation-for="Input.FirstName" class="text-danger"></span>
    </div>

    <!-- Last Name -->
    <div>
        <label>Last Name:</label>
        <input asp-for="Input.LastName" class="form-control" required />
        <span asp-validation-for="Input.LastName" class="text-danger"></span>
    </div>

    <!-- Gender -->
    <div>
        <label>Gender:</label>
        <select asp-for="Input.Gender" class="form-control" required>
            <option value="">Select Gender</option>
            <option>Male</option>
            <option>Female</option>
            <option>Other</option>
        </select>
        <span asp-validation-for="Input.Gender" class="text-danger"></span>
    </div>

    <!-- NRIC -->
    <div>
        <label>NRIC:</label>
        <input asp-for="Input.NRIC" class="form-control" required />
        <span asp-validation-for="Input.NRIC" class="text-danger"></span>
    </div>

    <!-- Email with real-time duplication check -->
    <div>
        <label>Email:</label>
        <input asp-for="Input.Email" class="form-control" id="Input_Email" required />
        <span asp-validation-for="Input.Email" class="text-danger"></span>
        <span id="email-error" class="text-danger"></span>
    </div>

    <!-- Password with strength checker -->
    <div>
        <label>Password:</label>
        <input asp-for="Input.Password" type="password" class="form-control" id="password" required oninput="checkPasswordStrength()" />
        <div id="password-strength" style="height: 10px; display: flex; margin-top: 5px;">
            <div style="flex: 1; margin-right: 2px; height: 100%; background-color: lightgray;" class="strength-bar"></div>
            <div style="flex: 1; margin-right: 2px; height: 100%; background-color: lightgray;" class="strength-bar"></div>
            <div style="flex: 1; margin-right: 2px; height: 100%; background-color: lightgray;" class="strength-bar"></div>
            <div style="flex: 1; margin-right: 2px; height: 100%; background-color: lightgray;" class="strength-bar"></div>
        </div>
        <small id="password-strength-text" class="form-text text-muted"></small>
        <span asp-validation-for="Input.Password" class="text-danger"></span>
    </div>

    <!-- Confirm Password -->
    <div>
        <label>Confirm Password:</label>
        <input asp-for="Input.ConfirmPassword" type="password" class="form-control" required />
        <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
    </div>

    <!-- Date of Birth -->
    <div>
        <label>Date of Birth:</label>
        <input asp-for="Input.DateOfBirth" type="date" class="form-control" required />
        <span asp-validation-for="Input.DateOfBirth" class="text-danger"></span>
    </div>

    <!-- Who Am I -->
    <div>
        <label>Who Am I:</label>
        <textarea asp-for="Input.WhoAmI" class="form-control"></textarea>
        <span asp-validation-for="Input.WhoAmI" class="text-danger"></span>
    </div>

    <!-- Resume Upload with file type validation -->
    <div>
        <label>Upload Resume (PDF/DOCX only):</label>
        <input asp-for="Input.Resume" type="file" class="form-control" id="Input_Resume" accept=".pdf,.docx" required />
        <span asp-validation-for="Input.Resume" class="text-danger"></span>
        <span id="file-error" class="text-danger"></span>
    </div>

    <!-- Submit Button -->
    <button type="submit" class="btn btn-primary mt-3">Register</button>

    <!-- General Error Message -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="text-danger mt-2">@Model.ErrorMessage</div>
    }
</form>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>


        // Real-time Email Validation
        document.getElementById('Input_Email').addEventListener('blur', function () {
            const email = this.value;
            const emailError = document.getElementById('email-error');

            if (email) {
                fetch(`/Account/Register?handler=CheckEmail&email=${encodeURIComponent(email)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.isEmailTaken) {
                            emailError.textContent = 'Email is already registered.';
                        } else {
                            emailError.textContent = '';
                        }
                    })
                    .catch(error => {
                        console.error('Error checking email:', error);
                    });
            }
        });

        // File Type Validation for Resume Upload
        document.getElementById('Input_Resume').addEventListener('change', function () {
            const file = this.files[0];
            const fileError = document.getElementById('file-error');
            const allowedExtensions = ['.pdf', '.docx'];

            if (file) {
                const fileExtension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();

                if (!allowedExtensions.includes(fileExtension)) {
                    fileError.textContent = 'Only PDF and DOCX files are allowed.';
                    this.value = ''; // Clear the invalid file
                } else {
                    fileError.textContent = '';
                }
            }
        });

        // Password Strength Checker
        function checkPasswordStrength() {
            const password = document.getElementById('password').value;
            const strengthBars = document.querySelectorAll('.strength-bar');
            const strengthText = document.getElementById('password-strength-text');

            let strength = 0;
            if (password.length >= 12) strength++;
            if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
            if (/\d/.test(password)) strength++;
            if (/[\W_]/.test(password)) strength++;

            // Update strength bars
            strengthBars.forEach((bar, index) => {
                if (index < strength) {
                    bar.style.backgroundColor = strength <= 1 ? 'red' :
                                                strength === 2 ? 'orange' :
                                                strength === 3 ? 'limegreen' : 'green';
                } else {
                    bar.style.backgroundColor = 'lightgray';
                }
            });

            // Update strength text
            strengthText.textContent = ['Very Weak', 'Weak', 'Fair', 'Good', 'Strong'][strength];
            strengthText.style.color = strength <= 1 ? 'red' : strength === 2 ? 'orange' : 'green';
        }
    </script>
}

}
